name: Build Pipeline Blocked
on:
  pull_request:
    types:
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - opened
      - edited
      - closed
      - reopened
      - synchronize
      - converted_to_draft
      - ready_for_review
      - locked
      - unlocked
      - review_requested
      - review_request_removed
      - auto_merge_enabled
      - auto_merge_disabled

jobs:
  Target_branch_locked:
    name: Build Pipeline Blocked
    runs-on: c8y-ci-cd
    steps:
     - name: Checking branches status
       run: |          
          #Replace these with generic user in future
          ghesAuth=70690ebd732a48e5dc52547f001d2bef3fd988e2
          ghesUserAlias=indgo 
            
          #Fetch the number of the pr for which this check is running 
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "Current PR number is : " $pull_number
          
          #Find the target branch name
          targetBranchOfPR=$(jq --raw-output '.pull_request.base.ref' "$GITHUB_EVENT_PATH")          
          echo "Target branch of this PR is : " $targetBranchOfPR
          
          #Identify the branch name of build pipeline repo
          #This is bp repo version for develop. Update this when new version is created on develop
          bpRepoVersion=10.12.0.x
          
          #Construct bpRepoVersion for release branches
          if [ $targetBranchOfPR != "develop_cicd" ]; then
            branchVersion=$(echo $targetBranchOfPR | cut -d '/' -f2)
            echo "Target branch is :" $branchVersion
            bpRepoVersion=$(echo $branchVersion | sed 's/r//' | sed 's/0$/x/' | sed 's/^\(.\{2\}\)/\1./')
            echo "RESULT" $bpRepoVersion
            isPrefixZero=$(echo $bpRepoVersion | head -c 4 | tail -c 1)
            if [ $isPrefixZero -eq 0 ]; then      
                short="${bpRepoVersion:1:1}"
                echo $short
                if [ $short -eq 0 ]; then
                  bpRepoVersion=$(echo $bpRepoVersion | sed 's/0//2')
                else
                  bpRepoVersion=$(echo $bpRepoVersion | sed 's/0//1')
                fi
            fi
          fi
          echo "BP Repo version to check blocker is : " $bpRepoVersion   
          
          array=(/PostMerge-Provisioned /PostMerge-Ready /Staging-Upgraded /Staging-Ready /Staging-Approved)
          for i in "${array[@]}"
              do
                  postMergeBranchName=$bpRepoVersion$i
                  echo "Checking for blocker label in all open PR to target branch :" $postMergeBranchName
                  
                  #Get any PR whose source branch is $postMergeBranchName and has 'pipeline-blocked' label on it
                  getBlockerPR=$(curl -i -u username:$ghesAuth https://api.github.softwareag.com/users/$ghesUserAlias -H "Accept: application/vnd.github.v3+json" https://github.softwareag.com/api/v3/repos/IOTA/c8y-iot-build-pipeline/pulls?head=IOTA:$postMergeBranchName | grep pipeline-blocked | cut -d ':' -f2 | sed 's/,$//' | sed 's/\"//g')
                  
                  #Do additional checks to confirm that the identified pr has 'pipeline-blocked' label on it
                  resPR=$(echo $getBlockerPR | awk '{print $2}')
                  echo "Found an open blocker in BP :" $resPR
                  if [ $resPR = "pipeline-blocked" ]; then
                    echo "Checking if this PR contains any blocker fix ...."
                    response=$(curl -i -u username:$ghesAuth https://api.github.softwareag.com/users/$ghesUserAlias -H "Accept: application/vnd.github.v3+json" https://github.softwareag.com/api/v3/repos/IOTA/cumulocity-core/pulls/$pull_number | grep blocker-fix | cut -d ':' -f2 | sed 's/,$//' | sed 's/\"//g')
                    result=$(echo $response | awk '{print $2}')
                    echo $result
                    if [[ $result = "blocker-fix" ]]; then
                      echo "This PR contains fix for a blocker, so letting it pass through"
                      exit 0;
                    else
                      echo "Build Pipeline is currently blocked for " $bpRepoVersion " Only blocker fixes are allowed to merge"
                      exit 1;
                    fi                  
                  fi           
            done                        
     - name: The job has succeeded
       if: ${{ success() }}
       run : exit 0
